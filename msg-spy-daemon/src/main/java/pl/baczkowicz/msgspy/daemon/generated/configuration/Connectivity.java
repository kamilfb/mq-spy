//
// Copyright (c) 2016 Kamil Baczkowicz
//
// CSOFF: a.*
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Timestamp removed by maven-replacer-plugin to avoid detecting changes - see the project POM for details
//


package pl.baczkowicz.msgspy.daemon.generated.configuration;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import pl.baczkowicz.mqttspy.daemon.configuration.generated.DaemonMqttConnectionDetails;


/**
 * <p>Java class for Connectivity complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Connectivity"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice&gt;
 *         &lt;element name="JmsConnection" type="{http://baczkowicz.pl/msg-spy/daemon/configuration}DaemonJmsConnectionDetails"/&gt;
 *         &lt;element name="StompConnection" type="{http://baczkowicz.pl/msg-spy/daemon/configuration}DaemonStompConnectionDetails"/&gt;
 *         &lt;element name="KinesisConnection" type="{http://baczkowicz.pl/msg-spy/daemon/configuration}DaemonKinesisConnectionDetails"/&gt;
 *         &lt;element name="MqttConnection" type="{http://baczkowicz.pl/mqtt-spy/daemon/configuration}DaemonMqttConnectionDetails"/&gt;
 *       &lt;/choice&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
*/
@SuppressWarnings("all")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Connectivity", propOrder = {
    "jmsConnection",
    "stompConnection",
    "kinesisConnection",
    "mqttConnection"
})
public class Connectivity
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "JmsConnection")
    protected DaemonJmsConnectionDetails jmsConnection;
    @XmlElement(name = "StompConnection")
    protected DaemonStompConnectionDetails stompConnection;
    @XmlElement(name = "KinesisConnection")
    protected DaemonKinesisConnectionDetails kinesisConnection;
    @XmlElement(name = "MqttConnection")
    protected DaemonMqttConnectionDetails mqttConnection;

    /**
     * Gets the value of the jmsConnection property.
     * 
     * @return
     *     possible object is
     *     {@link DaemonJmsConnectionDetails }
     *     
     */
    public DaemonJmsConnectionDetails getJmsConnection() {
        return jmsConnection;
    }

    /**
     * Sets the value of the jmsConnection property.
     * 
     * @param value
     *     allowed object is
     *     {@link DaemonJmsConnectionDetails }
     *     
     */
    public void setJmsConnection(DaemonJmsConnectionDetails value) {
        this.jmsConnection = value;
    }

    /**
     * Gets the value of the stompConnection property.
     * 
     * @return
     *     possible object is
     *     {@link DaemonStompConnectionDetails }
     *     
     */
    public DaemonStompConnectionDetails getStompConnection() {
        return stompConnection;
    }

    /**
     * Sets the value of the stompConnection property.
     * 
     * @param value
     *     allowed object is
     *     {@link DaemonStompConnectionDetails }
     *     
     */
    public void setStompConnection(DaemonStompConnectionDetails value) {
        this.stompConnection = value;
    }

    /**
     * Gets the value of the kinesisConnection property.
     * 
     * @return
     *     possible object is
     *     {@link DaemonKinesisConnectionDetails }
     *     
     */
    public DaemonKinesisConnectionDetails getKinesisConnection() {
        return kinesisConnection;
    }

    /**
     * Sets the value of the kinesisConnection property.
     * 
     * @param value
     *     allowed object is
     *     {@link DaemonKinesisConnectionDetails }
     *     
     */
    public void setKinesisConnection(DaemonKinesisConnectionDetails value) {
        this.kinesisConnection = value;
    }

    /**
     * Gets the value of the mqttConnection property.
     * 
     * @return
     *     possible object is
     *     {@link DaemonMqttConnectionDetails }
     *     
     */
    public DaemonMqttConnectionDetails getMqttConnection() {
        return mqttConnection;
    }

    /**
     * Sets the value of the mqttConnection property.
     * 
     * @param value
     *     allowed object is
     *     {@link DaemonMqttConnectionDetails }
     *     
     */
    public void setMqttConnection(DaemonMqttConnectionDetails value) {
        this.mqttConnection = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            DaemonJmsConnectionDetails theJmsConnection;
            theJmsConnection = this.getJmsConnection();
            strategy.appendField(locator, this, "jmsConnection", buffer, theJmsConnection);
        }
        {
            DaemonStompConnectionDetails theStompConnection;
            theStompConnection = this.getStompConnection();
            strategy.appendField(locator, this, "stompConnection", buffer, theStompConnection);
        }
        {
            DaemonKinesisConnectionDetails theKinesisConnection;
            theKinesisConnection = this.getKinesisConnection();
            strategy.appendField(locator, this, "kinesisConnection", buffer, theKinesisConnection);
        }
        {
            DaemonMqttConnectionDetails theMqttConnection;
            theMqttConnection = this.getMqttConnection();
            strategy.appendField(locator, this, "mqttConnection", buffer, theMqttConnection);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Connectivity)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Connectivity that = ((Connectivity) object);
        {
            DaemonJmsConnectionDetails lhsJmsConnection;
            lhsJmsConnection = this.getJmsConnection();
            DaemonJmsConnectionDetails rhsJmsConnection;
            rhsJmsConnection = that.getJmsConnection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "jmsConnection", lhsJmsConnection), LocatorUtils.property(thatLocator, "jmsConnection", rhsJmsConnection), lhsJmsConnection, rhsJmsConnection)) {
                return false;
            }
        }
        {
            DaemonStompConnectionDetails lhsStompConnection;
            lhsStompConnection = this.getStompConnection();
            DaemonStompConnectionDetails rhsStompConnection;
            rhsStompConnection = that.getStompConnection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stompConnection", lhsStompConnection), LocatorUtils.property(thatLocator, "stompConnection", rhsStompConnection), lhsStompConnection, rhsStompConnection)) {
                return false;
            }
        }
        {
            DaemonKinesisConnectionDetails lhsKinesisConnection;
            lhsKinesisConnection = this.getKinesisConnection();
            DaemonKinesisConnectionDetails rhsKinesisConnection;
            rhsKinesisConnection = that.getKinesisConnection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "kinesisConnection", lhsKinesisConnection), LocatorUtils.property(thatLocator, "kinesisConnection", rhsKinesisConnection), lhsKinesisConnection, rhsKinesisConnection)) {
                return false;
            }
        }
        {
            DaemonMqttConnectionDetails lhsMqttConnection;
            lhsMqttConnection = this.getMqttConnection();
            DaemonMqttConnectionDetails rhsMqttConnection;
            rhsMqttConnection = that.getMqttConnection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mqttConnection", lhsMqttConnection), LocatorUtils.property(thatLocator, "mqttConnection", rhsMqttConnection), lhsMqttConnection, rhsMqttConnection)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            DaemonJmsConnectionDetails theJmsConnection;
            theJmsConnection = this.getJmsConnection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "jmsConnection", theJmsConnection), currentHashCode, theJmsConnection);
        }
        {
            DaemonStompConnectionDetails theStompConnection;
            theStompConnection = this.getStompConnection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stompConnection", theStompConnection), currentHashCode, theStompConnection);
        }
        {
            DaemonKinesisConnectionDetails theKinesisConnection;
            theKinesisConnection = this.getKinesisConnection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "kinesisConnection", theKinesisConnection), currentHashCode, theKinesisConnection);
        }
        {
            DaemonMqttConnectionDetails theMqttConnection;
            theMqttConnection = this.getMqttConnection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mqttConnection", theMqttConnection), currentHashCode, theMqttConnection);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
